package it.org.agilos.zendesk_jira_plugin.integrationtest;

import it.org.agilos.zendesk_jira_plugin.integrationtest.atlassian.issuehandler.IssueHandler;
import it.org.agilos.zendesk_jira_plugin.integrationtest.atlassian.issuehandler.IssueHandlerProvider;

import java.net.URL;

import org.agilos.jira.soapclient.JiraSoapService;
import org.agilos.jira.soapclient.JiraSoapServiceService;
import org.agilos.jira.soapclient.JiraSoapServiceServiceLocator;
import org.apache.log4j.Logger;

import com.thoughtworks.selenium.DefaultSelenium;
import com.thoughtworks.selenium.Selenium;

/**
 * Wraps the implementation details of how to connect to JIRA and login.
 * 
 * This is a Singleton, so use the  {@link #instance} method to get an instance to the concrete instance.
 * 
 * The following system properties define the behavior of the <code>JIRAClient</code>:
 * <ul>
 * <li> zendesk.jira.url The url of the JIRA instance the client should connect to
 * <li> zendesk.jira.login.name The user name to login with
 * <li> zendesk.jira.login.password The password to login to jira with
 * </ul>
 */
public class JIRAClient {
	private static JIRAClient instance = new JIRAClient();

	protected JiraSoapService jiraSoapService;
	protected String jiraSoapToken;

	public static IssueHandler issueHandler = IssueHandlerProvider.getIssueHandler();

	private Logger log = Logger.getLogger(JIRAClient.class.getName());

	public static Selenium selenium;
	private Thread shutDownHook;

	private JIRAClient() {
		// Override default loading of localtest.properties by LocalTestEnvironment as this is auto generated by the Atlassian PDK
		if (System.getProperty("test.server.properties") == null || System.getProperty("test.server.properties").equals("")) 
			System.setProperty("test.server.properties", "test-jira-4.0.properties");

		selenium = new DefaultSelenium( "localhost", 4444, "*firefox", JIRA.URL);
		selenium.start();

		shutDownHook = new Thread(new ShutDownHook(selenium));
		shutDownHook.setName("SeleniumServerShutDownHook");
		Runtime.getRuntime().addShutdownHook(shutDownHook);
	}

	public void connect() throws Exception {		
		connect(JIRA.LOGIN_NAME, JIRA.LOGIN_PASSWORD);
	}

	public void connect(String user, String password) throws Exception {	
		URL jiraSOAPServiceUrl = new URL(JIRA.URL+"/rpc/soap/jirasoapservice-v2");
		JiraSoapServiceService jiraSoapServiceGetter = new JiraSoapServiceServiceLocator();
		jiraSoapService = jiraSoapServiceGetter.getJirasoapserviceV2(jiraSOAPServiceUrl);
		if (jiraSoapService == null) {
			throw new RuntimeException("Haven't been able to connect to the JIRA server ("+jiraSOAPServiceUrl);
		}
		
		jiraSoapToken = jiraSoapService.login(user, password);
		if (jiraSoapToken == null) {
			throw new RuntimeException("Haven't been able to login to the JIRA server with user:"+user+" and password:"+password);
		}
		login(user, password);
	}

	public static JIRAClient instance() {
		return instance;
	}

	/**
	 * Returns the JIRA service instance the client uses to connect to JIRA.
	 */
	public JiraSoapService getService() {
		return jiraSoapService;
	}

	/**
	 * The login token needed in all SOAP calls to JIRA
	 */
	public String getToken() {
		return jiraSoapToken;
	}

	public void setZendeskUrl(String zendeskURL) {
		gotoListenerConfiguration();
		log.info("Updating Zendesk URL to "+zendeskURL);
		selenium.type("ZendeskUrl", zendeskURL);
		selenium.click("update_submit");
		selenium.waitForPageToLoad("10000");
	}

	public void setZendeskCredentials(String zendeskLogin, String zendeskPW) {
		gotoListenerConfiguration();
		log.info("Updating Zendesk log to "+zendeskLogin+" and zendesk PW to "+zendeskPW);
		selenium.type("LoginName", zendeskLogin);
		selenium.type("LoginPassword", zendeskPW);
		selenium.click("update_submit");
		selenium.isTextPresent(zendeskLogin);
		selenium.isTextPresent(zendeskPW);
	}

	public void setCommentsPublic(String publicComments) {
		gotoListenerConfiguration();
		log.info("Setting public comment value to "+publicComments);
		selenium.type("//input[@name='Public comments']", "publicComments");
		selenium.click("update_submit");
		selenium.isTextPresent(publicComments);
	}	

	private void gotoListenerConfiguration() {
		selenium.click("admin_link");
		selenium.waitForPageToLoad("10000");
		
		selenium.click("listeners");
		selenium.waitForPageToLoad("10000");
		
		selenium.click("link=Edit");
		selenium.waitForPageToLoad("10000");
	}

	public void setUploadAttachments(String uploadAttachments) {
		gotoListenerConfiguration();
		log.info("Updating updateAttachments to "+uploadAttachments);
		selenium.type("//input[@name='Upload attachments']", uploadAttachments);
		selenium.click("update_submit");
		selenium.isTextPresent(uploadAttachments);
	}

	/**
	 * Logs into the JIRA web GUI
	 * @param username
	 * @param password
	 */
	public void login(String username, String password) {
		selenium.open("login.jsp");
		selenium.waitForPageToLoad("5000");
		selenium.type("login-form-username", username);
		selenium.type("login-form-password", password);
		selenium.click("login-form-submit");
		selenium.waitForPageToLoad("30000");
	}

	public void administratorAccess(String password) {
		if (selenium.isElementPresent("login-form-authenticatePassword")) {
			selenium.type("login-form-authenticatePassword", password);
			selenium.click("authenticateButton");
			selenium.waitForPageToLoad("3000");
		}
	}

	private class ShutDownHook implements Runnable {
		Selenium selenium;

		ShutDownHook(Selenium selenium) {
			this.selenium = selenium;
		}

		public void run() {
			selenium.stop();
		}
	}

}
